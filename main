#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Полная реализация Telegram-бота с интеграцией BigaChat API
Требования:
- Python 3.8+
- Зависимости: python-dotenv, requests, python-telegram-bot, certifi, uuid
"""

import os
import uuid
import logging
from typing import Dict, Any, Optional
from pathlib import Path

from dotenv import load_dotenv
import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# Настройка логирования
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Константы
CERT_PATH = Path(__file__).parent / "chain.pem"
OAUTH_URL = "https://ngu.devices.sberbank.ru:9443/api/v2/oauth"
CHAT_API_URL = "https://glgachat.devices.sberbank.ru/api/v1/chat/completions"
MAX_RETRIES = 3
BACKOFF_FACTOR = 0.5
TIMEOUT = 30

# Загрузка переменных окружения
load_dotenv()

class BigaChatAPI:
    """
    Полноценный клиент для работы с BigaChat API
    """
    
    def __init__(self):
        self.session = self._configure_session()
        self.client_id = os.getenv("BIGACHAT_CLIENT_ID")
        self.client_secret = os.getenv("BIGACHAT_CLIENT_SECRET")
        
        if not all([self.client_id, self.client_secret]):
            raise ValueError("BIGACHAT_CLIENT_ID и BIGACHAT_CLIENT_SECRET должны быть установлены в .env файле")
    
    def _configure_session(self) -> requests.Session:
        """
        Конфигурация HTTP сессии с повторными попытками и SSL верификацией
        """
        session = requests.Session()
        retry_strategy = Retry(
            total=MAX_RETRIES,
            backoff_factor=BACKOFF_FACTOR,
            status_forcelist=[408, 429, 500, 502, 503, 504]
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("https://", adapter)
        session.verify = str(CERT_PATH)
        return session
    
    def get_access_token(self) -> Optional[str]:
        """
        Получение OAuth токена для BigaChat API
        """
        try:
            headers = {
                "Authorization": f"Basic {self.client_id}:{self.client_secret}",
                "RqUID": str(uuid.uuid4()),
                "Content-Type": "application/x-www-form-urlencoded"
            }
            
            data = {"scope": "BIGACHAT_APL_PERS"}
            
            response = self.session.post(
                OAUTH_URL,
                headers=headers,
                data=data,
                timeout=TIMEOUT
            )
            
            response.raise_for_status()
            return response.json().get("access_token")
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Ошибка получения токена: {str(e)}")
            return None
    
    def send_message(self, prompt: str, token: str) -> Optional[str]:
        """
        Отправка сообщения в BigaChat API и получение ответа
        """
        try:
            headers = {
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": "Bigachat-Pro",
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.7,
                "max_tokens": 1000
            }
            
            response = self.session.post(
                CHAT_API_URL,
                headers=headers,
                json=data,
                timeout=TIMEOUT
            )
            
            response.raise_for_status()
            return self._parse_response(response.json())
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Ошибка API BigaChat: {str(e)}")
            return None
    
    def _parse_response(self, response_data: Dict[str, Any]) -> str:
        """
        Парсинг ответа от BigaChat API
        """
        try:
            return (
                response_data
                .get("choices", [{}])[0]
                .get("message", {})
                .get("content", "Не удалось обработать ответ сервера")
            )
        except (IndexError, KeyError, AttributeError) as e:
            logger.error(f"Ошибка парсинга ответа: {str(e)}")
            return "Ошибка обработки ответа от сервера"

class TelegramBot:
    """
    Полнофункциональный Telegram бот с обработчиками команд
    """
    
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN должен быть установлен в .env файле")
        
        self.bigachat = BigaChatAPI()
        self.application = self._configure_application()
    
    def _configure_application(self) -> Application:
        """
        Конфигурация Telegram бота с обработчиками
        """
        app = ApplicationBuilder().token(self.token).build()
        
        # Регистрация обработчиков
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Обработчики ошибок
        app.add_error_handler(self.error_handler)
        
        return app
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Обработчик команды /start
        """
        await update.message.reply_text(
            "Привет! Я интеллектуальный бот на базе BigaChat AI.\n\n"
            "Просто напиши мне сообщение, и я постараюсь помочь!\n\n"
            "Используй /help для просмотра доступных команд."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Обработчик команды /help
        """
        await update.message.reply_text(
            "Доступные команды:\n"
            "/start - Начать диалог\n"
            "/help - Показать это сообщение\n\n"
            "Просто напиши мне сообщение, и я отвечу!"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Обработчик текстовых сообщений
        """
        user_message = update.message.text
        user_id = update.message.from_user.id
        logger.info(f"Получено сообщение от {user_id}: {user_message}")
        
        await update.message.chat.send_action(action="typing")
        
        try:
            # Получаем токен
            token = self.bigachat.get_access_token()
            if not token:
                raise ValueError("Не удалось получить токен доступа")
            
            # Отправляем запрос в BigaChat
            response = self.bigachat.send_message(user_message, token)
            if not response:
                raise ValueError("Пустой ответ от BigaChat API")
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Ошибка обработки сообщения: {str(e)}")
            await update.message.reply_text(
                "Произошла ошибка при обработке вашего запроса. Пожалуйста, попробуйте позже."
            )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Глобальный обработчик ошибок
        """
        logger.error(f"Ошибка в боте: {context.error}", exc_info=context.error)
        
        if isinstance(update, Update):
            await update.message.reply_text(
                "Произошла критическая ошибка. Разработчики уже уведомлены."
            )
    
    def run(self) -> None:
        """
        Запуск бота
        """
        logger.info("Бот запущен")
        self.application.run_polling(drop_pending_updates=True)

def validate_environment() -> None:
    """
    Проверка необходимых переменных окружения и файлов
    """
    required_vars = [
        "TELEGRAM_BOT_TOKEN",
        "BIGACHAT_CLIENT_ID",
        "BIGACHAT_CLIENT_SECRET"
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        raise EnvironmentError(
            f"Отсутствуют обязательные переменные окружения: {', '.join(missing_vars)}"
        )
    
    if not CERT_PATH.exists():
        raise FileNotFoundError(
            f"Файл сертификата {CERT_PATH} не найден. "
            "Пожалуйста, разместите chain.pem в той же директории, что и скрипт."
        )

if __name__ == "__main__":
    try:
        validate_environment()
        bot = TelegramBot()
        bot.run()
    except Exception as e:
        logger.critical(f"Критическая ошибка при запуске бота: {str(e)}", exc_info=True)
        raise
